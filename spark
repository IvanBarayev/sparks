#!/usr/bin/env php
<?php

class SparkCLI {

    private static $disallowed_commands = array('execute', 'failtown', 'line');

    function __construct($spark_source) {
        $this->spark_source = $spark_source;
    }

    function execute($command, $args = array()) {
        if (in_array($command, self::$disallowed_commands) || !method_exists($this, $command)) {
            $this->failtown("Unknown action: $command");
            return;
        }
        $this->$command($args);
    }

    private function source() {
        $this->line('source: ' . $this->spark_source->url);
    }

    private function failtown($error_message) {
        $this->line('Uh-oh!');
        $this->line($error_message);
    }

    // commands

    private function install($args) {
        if (count($args) != 1) return $this->failtown('spark install <name>');
        list($spark_name) = $args;

        // retrieve the spark details
        $this->line("Retrieving spark detail from " . $this->spark_source->get_url());
        $spark = $this->spark_source->get_spark_detail($spark_name);

        // retrieve the spark
        $this->line("Retrieving spark from " . $spark->location_detail());
        $spark->retrieve();

        $this->line("Installing spark");
        $spark->install();
        $this->line('Spark installed to ' . $spark->installed_path() . ' - You\'re on fire!');
    }

    private static function line($msg) {
        echo "[SPARK] $msg\n";
    }

}

class Spark {

    function __construct($name, $data) {
        $this->name = $name;
        $this->data = $data;
        $this->spark_id = $this->data->id;
        $this->base_location = $this->data->base_location;
        // used internally
        $this->temp_token = 'spark-' . $this->spark_id . '-' . time();
    }

    final function installed_path() {
        return $this->installed_path;
    }

    function location_detail() { }
    function retrieve() { }

    function install() {
        $this->installed_path = $this->temp_path; 
    }

}

class ZipSpark extends Spark {

    function __construct($name, $data) {
        parent::__construct($name, $data);
        $this->temp_file = "/tmp/$this->temp_token.zip";
    }

    function location_detail() {
        return "ZIP file at $this->base_location";
    } 

    function retrieve() {
        file_put_contents($this->temp_file, file_get_contents($this->base_location));
        $this->temp_path = "/tmp/$this->temp_token";
        system("unzip $this->temp_file -d $this->temp_path"); 
    }

}

class GitSpark extends Spark {

    function __construct($name, $data) {
        parent::__construct($name, $data);
        $this->tag = $this->data->version;
    }

    function location_detail() {
        return "Git repository at $this->base_location";
    }

    function retrieve() {
        $this->temp_path = "/tmp/$this->temp_token";
        system("git clone $this->base_location $this->temp_path");
        system("cd $this->temp_path; git checkout $this->tag -b $this->temp_token");
        system("rm -rf $this->temp_path/.git");
    }

}

class MercurialSpark extends Spark {

    function __construct($name, $data) {
        parent::__construct($name, $data);
        $this->tag = $this->data->version;
    }

    function location_detail() {
        return "Mercurial repository at $this->base_location";
    }

    function retrieve() {
        $this->temp_path = "/tmp/$this->temp_token";
        system("hg clone -r$this->tag $this->base_location $this->temp_path");
        system("rm -rf $this->temp_path/.hg");
    }

}

class SparkSource {

    function get_spark_detail($spark_name, $version = 'HEAD') {
        $json_data = file_get_contents('http://' . $this->url . "/packages/$spark_name/versions/$version/spec.json");
        $data = json_decode($json_data);

        if ($data->repository_type == 'hg') return new MercurialSpark($spark_name, $data);
        else if ($data->repository_type == 'git') return new GitSpark($spark_name, $data);
        else if ($data->repository_type == 'zip') return new ZipSpark($spark_name, $data);

        else throw new Exception('Unknown repository type: ' . $data['repository_type']);
    }

    function __construct($url) {
        $this->url = $url;
    }    

    function get_url() {
        return $this->url;
    }

}

$source = new SparkSource('sparks.oconf.org');

# take commands
$cli = new SparkCLI($source);
if ($argc > 1) $cli->execute($argv[1], array_slice($argv, 2));
